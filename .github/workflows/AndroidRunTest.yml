name: Run Android tests in GitHub Runner

on:
  push:
    branches: [master]
  workflow_dispatch:

jobs:
  test:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: 17

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16.13.0'

      - name: Install Appium
        run: |
          npm install -g appium@latest
          appium -v
        shell: bash

      - name: Install Appium Doctor
        run: |
          npm install -g appium-doctor
          appium-doctor --version
        shell: bash

      - name: Install UIAutomator2 driver for Appium
        run: |
          appium driver install uiautomator2@3.0.1
        shell: bash

      - name: Download Android SDK Command Line Tools
        run: |
          Invoke-WebRequest -Uri "https://dl.google.com/android/repository/commandlinetools-win-7583922_latest.zip" -OutFile "android-sdk-tools.zip"
          Expand-Archive -Path "android-sdk-tools.zip" -DestinationPath "$env:RUNNER_WORKSPACE\android-sdk"
        shell: pwsh

      - name: Set up environment variables
        run: |
          $env:ANDROID_HOME = "${{ env.RUNNER_WORKSPACE }}\android-sdk"
          $env:PATH += ";${env:ANDROID_HOME}\cmdline-tools\bin"
          Write-Output "ANDROID_HOME is set to $env:ANDROID_HOME"
        shell: pwsh

      - name: Install Android SDK packages
        run: |
          sdkmanager --install 'platforms;android-30'
          sdkmanager --install 'system-images;android-30;google_apis;x86_64'
          sdkmanager --install 'platform-tools'
          sdkmanager --install 'emulator'
        shell: bash
        env:
          ANDROID_SDK_ROOT: ${{ env.RUNNER_WORKSPACE }}\android-sdk

      - name: Accept SDK licenses
        run: |
          yes | sdkmanager --licenses
        shell: bash
        env:
          ANDROID_SDK_ROOT: ${{ env.RUNNER_WORKSPACE }}\android-sdk

      - name: Verify Android SDK Installation
        run: sdkmanager --list
        shell: bash
        env:
          ANDROID_SDK_ROOT: ${{ env.RUNNER_WORKSPACE }}\android-sdk

      - name: Run Appium Doctor
        run: |
          appium-doctor --android
        shell: bash

      - name: Create AVD
        run: |
          echo no | avdmanager create avd -n Pixel_6_API_30 -k "system-images;android-30;google_apis;x86_64" --force
        shell: bash
        env:
          ANDROID_SDK_ROOT: ${{ env.RUNNER_WORKSPACE }}\android-sdk

      - name: List available AVDs
        run: |
          avdmanager list avd
          dir $HOME\.android\avd
        shell: bash
        env:
          ANDROID_SDK_ROOT: ${{ env.RUNNER_WORKSPACE }}\android-sdk

      - name: Find Emulator Path
        id: find-emulator-path
        run: |
          echo "emulator-path=$(which emulator)" >> $GITHUB_ENV
        shell: bash

      - name: Start emulator
        run: |
          emulator -avd Pixel_6_API_30 -no-audio -no-window &
          sleep 60
          adb devices
        env:
          ANDROID_SDK_ROOT: ${{ env.RUNNER_WORKSPACE }}/android-sdk
        shell: bash

      - name: Start Appium server
        run: |
          appium &
        shell: bash
        env:
          ANDROID_HOME: ${{ env.RUNNER_WORKSPACE }}\android-sdk
          ANDROID_SDK_ROOT: ${{ env.RUNNER_WORKSPACE }}\android-sdk

      - name: Verify Appium server is running
        run: |
          $response = curl http://127.0.0.1:4723/status
          if ($response.StatusCode -eq 200) {
            Write-Host "Appium server is running"
          } else {
            Write-Host "Appium server is not running"
            exit 1
          }
        shell: pwsh

      - name: Run Android Tests
        run: |
          echo "JAVA_HOME: $env:JAVA_HOME"
          echo "ANDROID_HOME: $env:ANDROID_HOME"
          echo "ANDROID_SDK_ROOT: $env:ANDROID_SDK_ROOT"
          Get-ChildItem
          echo "Running Maven tests..."
          mvn test -Denv=local
          echo "Maven tests completed."
        env:
          JAVA_HOME: ${{ env.JAVA_HOME }}
          ANDROID_HOME: ${{ env.RUNNER_WORKSPACE }}\android-sdk
          ANDROID_SDK_ROOT: ${{ env.RUNNER_WORKSPACE }}\android-sdk
        shell: pwsh
