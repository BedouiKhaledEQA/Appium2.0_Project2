name: Run Android tests in GitHub Runner

on:
  push:
    branches: [master]
  workflow_dispatch:

jobs:
  test:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up environment variables
        run: |
          echo "Setting up environment variables"
          echo "ANDROID_HOME=C:/Android/android-sdk" >> $GITHUB_ENV
          echo "ANDROID_SDK_ROOT=C:/Android/android-sdk" >> $GITHUB_ENV
          echo "PATH=$PATH:$ANDROID_HOME/emulator:$ANDROID_HOME/platform-tools:$ANDROID_HOME/tools:$ANDROID_HOME/tools/bin" >> $GITHUB_ENV
        shell: bash

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: 17

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16.13.0'

      - name: Install Appium
        run: |
          npm install -g appium@latest
          appium -v
        shell: bash

      - name: Install Appium Doctor
        run: |
          npm install -g appium-doctor
          appium-doctor --version
        shell: bash

      - name: Install UIAutomator2 driver for Appium
        run: |
          appium driver install uiautomator2@3.0.1
        shell: bash

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: Install Android SDK packages
        run: |
          sdkmanager --install 'system-images;android-30;google_apis;x86_64'
          sdkmanager --install 'platform-tools'
          sdkmanager --install 'emulator'

      - name: Accept SDK licenses
        run: |
          echo y | sdkmanager --licenses

      - name: Run Appium Doctor
        run: |
          appium-doctor --android
        shell: bash

      - name: Create AVD
        run: |
          echo no | avdmanager create avd -n Nexus_6_API_30 -k "system-images;android-30;google_apis;x86_64" --force
        timeout-minutes: 10

      - name: List available AVDs
        run: |
          avdmanager list avd
          dir $HOME\.android\avd

      - name: Verify PATH
        run: |
          echo $PATH
          which emulator
          which adb
        shell: bash

      - name: Start emulator
        run: |
          emulator -avd Nexus_6_API_30 -no-audio -no-window -gpu swiftshader_indirect &
          adb wait-for-device
          sleep 180
          adb shell input keyevent 82
          boot_completed=false
          retry_count=0
          max_retries=10
          until [ "$boot_completed" = "1" ] || [ "$retry_count" -ge "$max_retries" ]; do
            boot_completed=$(adb shell getprop sys.boot_completed 2>/dev/null)
            if [ "$boot_completed" = "1" ]; then
              echo "Emulator boot completed."
              break
            fi
            echo "Waiting for emulator to boot..."
            sleep 20
            retry_count=$((retry_count + 1))
          done
          if [ "$boot_completed" != "1" ]; then
            echo "Emulator failed to boot in time."
            exit 1
          fi
        shell: bash
        env:
          ANDROID_HOME: ${{ env.ANDROID_HOME }}
          ANDROID_SDK_ROOT: ${{ env.ANDROID_SDK_ROOT }}

      - name: Verify emulator is running
        run: |
          adb devices
          adb shell getprop init.svc.bootanim | grep -m 1 stopped
        shell: bash

      - name: Start Appium server
        run: |
          appium &
        shell: bash
        env:
          ANDROID_HOME: ${{ env.ANDROID_HOME }}
          ANDROID_SDK_ROOT: ${{ env.ANDROID_SDK_ROOT }}

      - name: Verify Appium server is running
        run: |
          curl http://127.0.0.1:4723/status
          if ($?) { Write-Host "Appium server is running" } else { Write-Host "Appium server is not running"; exit 1 }
        shell: pwsh

      - name: Run Android Tests
        run: |
          echo "JAVA_HOME: $env:JAVA_HOME"
          echo "ANDROID_HOME: $env:ANDROID_HOME"
          echo "ANDROID_SDK_ROOT: $env:ANDROID_SDK_ROOT"
          Get-ChildItem
          echo "Running Maven tests..."
          mvn test -Denv=local
          echo "Maven tests completed."
        env:
          ANDROID_HOME: ${{ env.ANDROID_HOME }}
          ANDROID_SDK_ROOT: ${{ env.ANDROID_SDK_ROOT }}
